name: get curr confluence

on:
  push:
    branches: [ main ]

jobs:
  get-curr-confluence:
    runs-on: ubuntu-latest
    
    env:
      CONFLUENCE_URL: ${{ secrets.CONFLUENCE_URL }}
      CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME }}
      CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN }}
      REPO_PAGE_ID: ${{ secrets.REPO_PAGE_ID }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 

    - name: Extract Comprehensive Commit Information
      run: |
        echo "=== COMMIT INFORMATION ==="
        echo "Current Commit SHA: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Event Type: ${{ github.event_name }}"
        
        # For merge commits, get the changes from the merged branch
        if [[ "${{ github.event_name }}" == "push" && "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
          echo "=== MERGE COMMIT DETECTED ==="
          # Get the parent commits (the merge commit has 2 parents)
          MERGE_PARENTS=$(git rev-list --parents -n 1 HEAD | wc -w)
          if [ $MERGE_PARENTS -eq 3 ]; then
            # This is a merge commit, get changes from the merged branch
            MERGED_BRANCH=$(git rev-list --parents -n 1 HEAD | cut -d' ' -f3)
            BASE_COMMIT=$(git merge-base HEAD~1 $MERGED_BRANCH)
            echo "=== COMMITS FROM MERGED BRANCH ==="
            git log --oneline $BASE_COMMIT..$MERGED_BRANCH
            echo "=== DETAILED COMMIT HISTORY ==="
            git log --pretty=format:"%h - %an, %ar : %s" $BASE_COMMIT..$MERGED_BRANCH
          fi
        else
          echo "=== COMMITS SINCE LAST MAIN MERGE ==="
          git log --oneline origin/main...HEAD
          echo "=== DETAILED COMMIT HISTORY ==="
          git log --pretty=format:"%h - %an, %ar : %s" origin/main...HEAD
        fi

    - name: Get All Files Changed Since Last Main
      run: |
        # Determine the comparison range based on commit type
        if [[ "${{ github.event_name }}" == "push" && "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
          MERGE_PARENTS=$(git rev-list --parents -n 1 HEAD | wc -w)
          if [ $MERGE_PARENTS -eq 3 ]; then
            MERGED_BRANCH=$(git rev-list --parents -n 1 HEAD | cut -d' ' -f3)
            BASE_COMMIT=$(git merge-base HEAD~1 $MERGED_BRANCH)
            COMPARE_RANGE="$BASE_COMMIT..$MERGED_BRANCH"
            echo "=== USING MERGE COMPARISON: $COMPARE_RANGE ==="
          else
            COMPARE_RANGE="origin/main...HEAD"
            echo "=== USING STANDARD COMPARISON: $COMPARE_RANGE ==="
          fi
        else
          COMPARE_RANGE="origin/main...HEAD"
          echo "=== USING STANDARD COMPARISON: $COMPARE_RANGE ==="
        fi
        
        echo "=== ALL FILES CHANGED ==="
        git diff --name-only $COMPARE_RANGE
        
        echo "=== COMPLETE CODE CHANGES ==="
        git diff $COMPARE_RANGE > code-changes.diff
        cat code-changes.diff
        
        echo "=== FILE STATISTICS ==="
        git diff --stat $COMPARE_RANGE > file-stats.txt
        cat file-stats.txt

    - name: Create Comprehensive Commit Data
      run: |
        # Determine the comparison range based on commit type
        if [[ "${{ github.event_name }}" == "push" && "${{ github.event.head_commit.message }}" == *"Merge pull request"* ]]; then
          MERGE_PARENTS=$(git rev-list --parents -n 1 HEAD | wc -w)
          if [ $MERGE_PARENTS -eq 3 ]; then
            MERGED_BRANCH=$(git rev-list --parents -n 1 HEAD | cut -d' ' -f3)
            BASE_COMMIT=$(git merge-base HEAD~1 $MERGED_BRANCH)
            COMPARE_RANGE="$BASE_COMMIT..$MERGED_BRANCH"
          else
            COMPARE_RANGE="origin/main...HEAD"
          fi
        else
          COMPARE_RANGE="origin/main...HEAD"
        fi
        
        # Create commit history array
        COMMIT_HISTORY=$(git log --pretty=format:'{"sha":"%h","author":"%an","message":"%s","date":"%ad"}' --date=iso $COMPARE_RANGE | tr '\n' ',' | sed 's/,$//')
        
        # Create files changed array
        FILES_CHANGED=$(git diff --name-only $COMPARE_RANGE | sed 's/^/"/;s/$/"/' | tr '\n' ',' | sed 's/,$//')
        
        # Create contributors array
        CONTRIBUTORS=$(git log --pretty=format:'%an' $COMPARE_RANGE | sort -u | sed 's/^/"/;s/$/"/' | tr '\n' ',' | sed 's/,$//')
        
        # Encode code changes and file stats for JSON
        CODE_CHANGES_B64=$(base64 -w 0 code-changes.diff)
        FILE_STATS_B64=$(base64 -w 0 file-stats.txt)
        
        cat > commit-data.json << EOF
        {
          "current_commit": {
            "sha": "${{ github.sha }}",
            "author": "${{ github.actor }}",
            "message": $(echo '${{ github.event.head_commit.message }}' | jq -R -s .),
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          },
          "branch": "${{ github.ref_name }}",
          "event_type": "${{ github.event_name }}",
          "commit_history": [$COMMIT_HISTORY],
          "files_changed": [$FILES_CHANGED],
          "code_changes": "$CODE_CHANGES_B64",
          "file_statistics": "$FILE_STATS_B64",
          "total_commits": $(git rev-list --count $COMPARE_RANGE),
          "contributors": [$CONTRIBUTORS]
        }
        EOF
        
        echo "=== COMPREHENSIVE COMMIT DATA ==="
        cat commit-data.json

    - name: get curr confluence repo file
      run: |
        echo "fetch curr confluence repo file"
        curl --request GET \
          --url "$CONFLUENCE_URL/wiki/api/v2/pages/$REPO_PAGE_ID?body-format=storage" \
          --user "$CONFLUENCE_USERNAME:$CONFLUENCE_API_TOKEN" \
          --header 'Accept: application/json' \
          -o confluence-response.json

        echo "=== CONFLUENCE PAGE CONTENT ==="
        cat confluence-response.json
        
        echo "=== PAGE TITLE ==="
        jq -r '.title' confluence-response.json
        
        echo "=== PAGE BODY CONTENT ==="
        jq -r '.body.storage.value' confluence-response.json

    - name: Combine Data for AI Processing
      run: |
        echo "=== COMBINED DATA FOR AI ==="
        echo "Confluence Content:"
        jq -r '.body.storage.value' confluence-response.json
        echo ""
        echo "Commit Information:"
        cat commit-data.json

    - name: Send Data to OpenAI for Confluence Update
      run: |
        echo "=== SENDING DATA TO OPENAI FOR CONFLUENCE UPDATE ==="
        
        # Read the Base64 encoded data from files
        CODE_CHANGES_B64=$(base64 -w 0 code-changes.diff)
        FILE_STATS_B64=$(base64 -w 0 file-stats.txt)
        
        # Decode the Base64 encoded data for the API call
        CODE_CHANGES_DECODED=$(echo "$CODE_CHANGES_B64" | base64 -d)
        FILE_STATS_DECODED=$(echo "$FILE_STATS_B64" | base64 -d)
        
        # Properly escape all content for JSON
        CONFLUENCE_CONTENT=$(jq -r '.body.storage.value // "No content found"' confluence-response.json | jq -R -s .)
        COMMIT_DATA_JSON=$(cat commit-data.json | jq -c .)
        CODE_CHANGES_JSON=$(echo "$CODE_CHANGES_DECODED" | jq -R -s .)
        FILE_STATS_JSON=$(echo "$FILE_STATS_DECODED" | jq -R -s .)
        
        # Create the prompt for OpenAI using jq to build proper JSON
        jq -n \
          --arg confluence "$CONFLUENCE_CONTENT" \
          --arg commit_data "$COMMIT_DATA_JSON" \
          --arg code_changes "$CODE_CHANGES_JSON" \
          --arg file_stats "$FILE_STATS_JSON" \
          '{
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are a technical documentation assistant. You will receive current Confluence documentation, git commit information, and code changes. Generate updated Confluence documentation that reflects the recent changes made to the codebase."
              },
              {
                "role": "user",
                "content": ("Current Confluence Documentation:\n\n" + $confluence + "\n\n\nRecent Git Changes:\n\n" + $commit_data + "\n\n\nCode Changes (Diff):\n\n" + $code_changes + "\n\n\nFile Statistics:\n\n" + $file_stats + "\n\n\nPlease generate updated Confluence documentation that reflects these changes. Return only the updated HTML content.")
              }
            ],
            "max_tokens": 3000,
            "temperature": 0.7
          }' > openai-prompt.json
        
        echo "=== CALLING OPENAI API ==="
        curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -d @openai-prompt.json \
          https://api.openai.com/v1/chat/completions \
          -o openai-response.json
        
        echo "=== OPENAI RESPONSE ==="
        cat openai-response.json
        
        echo "=== UPDATED CONFLUENCE CONTENT ==="
        jq -r '.choices[0].message.content' openai-response.json

    - name: Update Confluence Page with AI Content
      run: |
        echo "=== UPDATING CONFLUENCE PAGE ==="
        
        # Get the current page version and ID
        PAGE_VERSION=$(jq -r '.version.number' confluence-response.json)
        REPO_PAGE_ID=$(jq -r '.id' confluence-response.json)
        
        # Get the AI-generated content
        AI_CONTENT=$(jq -r '.choices[0].message.content' openai-response.json)
        
        # Create the update payload
        jq -n \
          --arg content "$AI_CONTENT" \
          --argjson version $PAGE_VERSION \
          --argjson page_id $REPO_PAGE_ID \
          '{
            "id": $page_id,
            "status": "current",
            "title": "confluence repo test page",
            "body": {
              "representation": "storage",
              "value": $content
            },
            "version": {
              "number": ($version + 1),
              "message": "Auto-updated by GitHub Actions workflow"
            }
          }' > confluence-update.json
        
        echo "=== SENDING UPDATE TO CONFLUENCE ==="
        curl --request PUT \
          --url "$CONFLUENCE_URL/wiki/api/v2/pages/$REPO_PAGE_ID" \
          --user "$CONFLUENCE_USERNAME:$CONFLUENCE_API_TOKEN" \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/json' \
          --data @confluence-update.json \
          -o confluence-update-response.json
        
        echo "=== CONFLUENCE UPDATE RESPONSE ==="
        cat confluence-update-response.json
        
        # Check if update was successful
        if jq -e '.id' confluence-update-response.json > /dev/null; then
          echo "✅ Confluence page updated successfully!"
          echo "   New version: $(jq -r '.version.number' confluence-update-response.json)"
          echo "   Page URL: $(jq -r '._links.webui' confluence-update-response.json)"
        else
          echo "❌ Confluence update failed"
          echo "   Error: $(jq -r '.message // "Unknown error"' confluence-update-response.json)"
        fi