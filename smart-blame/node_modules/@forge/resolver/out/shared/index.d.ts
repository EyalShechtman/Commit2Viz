export declare type Context = {
    [key: string]: any;
};
export declare type Request<Argument = any> = {
    payload: Argument;
    context: Context;
};
export declare type Definitions = Record<string, (i: never) => unknown>;
export declare type DefArguments<D extends Definitions, Def extends keyof D & string> = Parameters<D[Def]> extends [] ? [] : [Parameters<D[Def]>[0]];
export declare type DefArgument<D extends Definitions, Def extends keyof D & string> = DefArguments<D, Def>[0];
export declare type DefResult<D extends Definitions, Def extends keyof D & string> = Awaited<ReturnType<D[Def]>>;
//# sourceMappingURL=index.d.ts.map