import { ProductContext } from './productContext';
export interface SubscriptionOptions {
    replaySeconds?: number;
    token?: string;
    contextOverrides?: ProductContext[];
}
export interface PublishOptions {
    token?: string;
    contextOverrides?: ProductContext[];
}
export interface PublishResult {
    eventId?: string | null;
    eventTimestamp?: string | null;
    errors?: string[];
}
interface Subscription {
    unsubscribe: () => Promise<void>;
}
export declare const realtime: {
    publish: (channel: string, payload: any, options?: PublishOptions) => Promise<PublishResult>;
    subscribe: (channel: string, callback: (payload?: any) => any, options?: SubscriptionOptions) => Promise<Subscription>;
    publishGlobal: (channel: string, payload: any, options?: PublishOptions) => Promise<PublishResult>;
    subscribeGlobal: (channel: string, callback: (payload?: any) => any, options?: SubscriptionOptions) => Promise<Subscription>;
};
export {};
//# sourceMappingURL=realtime.d.ts.map