import type { Definitions, DefArguments, DefResult } from '@forge/resolver/shared';
import { InvokePayload } from '../types';
export declare const invoke: <T>(functionKey: string, payload?: InvokePayload | undefined) => Promise<T>;
declare type Invoke<Defs extends Definitions> = <Def extends keyof Defs & string>(call: Def, ...arg: DefArguments<Defs, Def>) => Promise<DefResult<Defs, Def>>;
export declare function makeInvoke<Defs extends Definitions>(): Invoke<Defs>;
export {};
//# sourceMappingURL=invoke.d.ts.map