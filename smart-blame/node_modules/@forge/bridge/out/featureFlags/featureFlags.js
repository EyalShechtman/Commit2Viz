"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForgeFeatureFlags = void 0;
const js_client_1 = require("@statsig/js-client");
const dataAdapter_1 = require("./dataAdapter");
class ForgeFeatureFlags {
    constructor() {
        this.initialized = false;
        this.client = null;
        this.dataAdapter = null;
        this.CLIENT_KEY = 'client-forge-internal-key';
    }
    async initialize(user, config = {}) {
        if (this.isInitialized()) {
            return;
        }
        this.dataAdapter = new dataAdapter_1.ForgeDataAdapter();
        const options = {
            environment: { tier: config.environment || 'development' },
            disableEvaluationMemoization: false,
            loggingEnabled: js_client_1.LoggingEnabledOption.disabled,
            logLevel: js_client_1.LogLevel.None,
            dataAdapter: this.dataAdapter
        };
        this.client = new js_client_1.StatsigClient(this.CLIENT_KEY, this.convertUser(user), options);
        await this.client.initializeAsync();
        this.initialized = true;
    }
    checkFlag(flagName) {
        if (!this.isInitialized() || !this.client) {
            throw new Error('ForgeFeatureFlags not initialized. Call initialize() first.');
        }
        return this.client.checkGate(flagName, { disableExposureLog: true });
    }
    async shutdown() {
        if (!this.isInitialized() || !this.client) {
            return;
        }
        await this.client.shutdown();
        if (this.dataAdapter) {
            await this.dataAdapter.shutdown();
        }
        this.initialized = false;
    }
    isInitialized() {
        return this.initialized;
    }
    convertUser(user) {
        return {
            userID: user.userId,
            custom: { ...(user.custom || {}), ...(user.attributes || {}) },
            customIDs: user.identifiers || {}
        };
    }
}
exports.ForgeFeatureFlags = ForgeFeatureFlags;
