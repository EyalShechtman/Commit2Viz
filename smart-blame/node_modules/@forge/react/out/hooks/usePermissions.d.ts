/**
 * https://ecosystem-platform.atlassian.net/browse/DEPLOY-1411
 * reuse logic from @forge/api
 */
/**
 * Resource types that can be loaded externally
 */
declare const RESOURCE_TYPES: readonly ["fonts", "styles", "frames", "images", "media", "scripts"];
export declare type ResourceType = (typeof RESOURCE_TYPES)[number];
/**
 * Fetch types for external requests
 */
declare const FETCH_TYPES: readonly ["backend", "client"];
export declare type FetchType = (typeof FETCH_TYPES)[number];
export interface Permissions {
    scopes?: string[];
    external?: {
        fetch?: {
            backend?: string[];
            client?: string[];
        };
        fonts?: string[];
        styles?: string[];
        frames?: string[];
        images?: string[];
        media?: string[];
        scripts?: string[];
    };
    content?: Record<string, unknown>;
}
/**
 * Required permissions for a component
 */
export declare type PermissionRequirements = Permissions;
/**
 * Missing permissions information
 */
export declare type MissingPermissions = Permissions;
/**
 * Permission check result
 */
export interface PermissionCheckResult {
    granted: boolean;
    missing: MissingPermissions | null;
}
/**
 * Hook for checking permissions in Forge apps
 *
 * @param requiredPermissions - The permissions required for the component
 * @returns Object containing permission state, loading status, and error information
 * @returns hasPermission - Whether all required permissions are granted
 * @returns isLoading - Whether the permission check is still in progress
 * @returns missingPermissions - Details about which permissions are missing (null if all granted)
 * @returns error - Any error that occurred during permission checking (null if no error)
 *
 * @example
 * ```tsx
 * const MyComponent: React.FC = () => {
 *   const { hasPermission, isLoading, missingPermissions, error } = usePermissions({
 *     scopes: ['write:confluence-content'],
 *     external: {
 *       fetch: {
 *         backend: ['https://api.example.com']
 *       }
 *     }
 *   });
 *
 *   if (isLoading) return <LoadingSpinner />;
 *
 *   if (error) {
 *     return <ErrorMessage error={error} />;
 *   }
 *
 *   if (!hasPermission) {
 *     return <PermissionDenied missingPermissions={missingPermissions} />;
 *   }
 *
 *   return <ProtectedFeature />;
 * };
 * ```
 */
export declare const usePermissions: (requiredPermissions: PermissionRequirements) => {
    hasPermission: boolean;
    isLoading: boolean;
    missingPermissions: Permissions | null;
    error: Error | null;
};
export {};
//# sourceMappingURL=usePermissions.d.ts.map