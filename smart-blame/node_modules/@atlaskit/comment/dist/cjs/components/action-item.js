"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _analyticsNext = require("@atlaskit/analytics-next");
var _button = _interopRequireDefault(require("@atlaskit/button"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != _typeof(e) && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ActionItem = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    providedOnClick = _ref.onClick,
    onFocus = _ref.onFocus,
    onMouseOver = _ref.onMouseOver,
    isDisabled = _ref.isDisabled;
  var onClick = (0, _analyticsNext.usePlatformLeafEventHandler)({
    fn: function fn(event, analyticsEvent) {
      return providedOnClick && providedOnClick(event, analyticsEvent);
    },
    action: 'clicked',
    componentName: 'commentAction',
    packageName: "@atlaskit/comment",
    packageVersion: "13.0.14"
  });
  return (
    /*#__PURE__*/
    /**
     * It is not normally acceptable to add click and key handlers to non-interactive
     * elements as this is an accessibility anti-pattern. However, because this
     * instance is to add support for analytics instead of creating an inaccessible
     * custom element, we can add role="presentation" so that there are no negative
     * impacts to assistive technologies.
     */
    // eslint-disable-next-line @atlassian/a11y/interactive-element-not-keyboard-focusable
    _react.default.createElement("span", {
      role: "presentation",
      onClick: onClick,
      onFocus: onFocus,
      onMouseOver: onMouseOver
    }, /*#__PURE__*/_react.default.createElement(_button.default, {
      ref: ref,
      appearance: "subtle-link",
      spacing: "none",
      type: "button",
      isDisabled: isDisabled
    }, children))
  );
});

// eslint-disable-next-line @repo/internal/react/require-jsdoc
var _default = exports.default = ActionItem;